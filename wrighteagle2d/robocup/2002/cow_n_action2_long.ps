%!PS-Adobe-2.0

%%Creator: Witty user
%%Title: User Document
%%CreationDate: ????
%%Pages: (atend)
%%BoundingBox: 0 0 612 792
%%EndComments
% Bitmap font from 8x16 bitmap
% Copyright (c). 1992, Yury Merezhuk.<zuk@elvis.msk.su>
/newfont 10 dict def
newfont begin

/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [0 0 1000 1000] def

/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for

Encoding   1 /char_01 put    % ascii not printable,  = 1,
Encoding   2 /char_02 put    % ascii not printable,  = 2,
Encoding   3 /char_03 put    % ascii not printable,  = 3,
Encoding   4 /char_04 put    % ascii not printable,  = 4,
Encoding   5 /char_05 put    % ascii not printable,  = 5,
Encoding   6 /char_06 put    % ascii not printable,  = 6,
Encoding   7 /char_07 put    % ascii not printable,  = 7,
Encoding   8 /char_08 put    % ascii not printable,  = 8,
Encoding   9 /char_09 put    % ascii not printable,  = 9,
Encoding  10 /char_0A put    % ascii not printable,  = 10,
Encoding  11 /char_0B put    % ascii not printable,  = 11,
Encoding  12 /char_0C put    % ascii not printable,  = 12,
Encoding  13 /char_0D put    % ascii not printable,  = 13,
Encoding  14 /char_0E put    % ascii not printable,  = 14,
Encoding  15 /char_0F put    % ascii not printable,  = 15,
Encoding  16 /char_10 put    % ascii not printable,  = 16,
Encoding  17 /char_11 put    % ascii not printable,  = 17,
Encoding  18 /char_12 put    % ascii not printable,  = 18,
Encoding  19 /char_13 put    % ascii not printable,  = 19,
Encoding  20 /char_14 put    % ascii not printable,  = 20,
Encoding  21 /char_15 put    % ascii not printable,  = 21,
Encoding  22 /char_16 put    % ascii not printable,  = 22,
Encoding  23 /char_17 put    % ascii not printable,  = 23,
Encoding  24 /char_18 put    % ascii not printable,  = 24,
Encoding  25 /char_19 put    % ascii not printable,  = 25,
Encoding  26 /char_1A put    % ascii not printable,  = 26,
Encoding  27 /char_1B put    % ascii not printable,  = 27,
Encoding  28 /char_1C put    % ascii not printable,  = 28,
Encoding  29 /char_1D put    % ascii not printable,  = 29,
Encoding  30 /char_1E put    % ascii not printable,  = 30,
Encoding  31 /char_1F put    % ascii not printable,  = 31,
Encoding  32 /char_20 put    % ascii not printable,  = 32,
Encoding  33 /char_21 put    % ascii '!',  = 33,
Encoding  34 /char_22 put    % ascii '"',  = 34,
Encoding  35 /char_23 put    % ascii '#',  = 35,
Encoding  36 /char_24 put    % ascii '$',  = 36,
Encoding  37 /char_25 put    % ascii '%',  = 37,
Encoding  38 /char_26 put    % ascii '&',  = 38,
Encoding  39 /char_27 put    % ascii ''',  = 39,
Encoding  40 /char_28 put    % ascii '(',  = 40,
Encoding  41 /char_29 put    % ascii ')',  = 41,
Encoding  42 /char_2A put    % ascii '*',  = 42,
Encoding  43 /char_2B put    % ascii '+',  = 43,
Encoding  44 /char_2C put    % ascii ',',  = 44,
Encoding  45 /char_2D put    % ascii '-',  = 45,
Encoding  46 /char_2E put    % ascii '.',  = 46,
Encoding  47 /char_2F put    % ascii '/',  = 47,
Encoding  48 /char_30 put    % ascii '0',  = 48,
Encoding  49 /char_31 put    % ascii '1',  = 49,
Encoding  50 /char_32 put    % ascii '2',  = 50,
Encoding  51 /char_33 put    % ascii '3',  = 51,
Encoding  52 /char_34 put    % ascii '4',  = 52,
Encoding  53 /char_35 put    % ascii '5',  = 53,
Encoding  54 /char_36 put    % ascii '6',  = 54,
Encoding  55 /char_37 put    % ascii '7',  = 55,
Encoding  56 /char_38 put    % ascii '8',  = 56,
Encoding  57 /char_39 put    % ascii '9',  = 57,
Encoding  58 /char_3A put    % ascii ':',  = 58,
Encoding  59 /char_3B put    % ascii ';',  = 59,
Encoding  60 /char_3C put    % ascii '<',  = 60,
Encoding  61 /char_3D put    % ascii '=',  = 61,
Encoding  62 /char_3E put    % ascii '>',  = 62,
Encoding  63 /char_3F put    % ascii '?',  = 63,
Encoding  64 /char_40 put    % ascii '@',  = 64,
Encoding  65 /char_41 put    % ascii 'A',  = 65,
Encoding  66 /char_42 put    % ascii 'B',  = 66,
Encoding  67 /char_43 put    % ascii 'C',  = 67,
Encoding  68 /char_44 put    % ascii 'D',  = 68,
Encoding  69 /char_45 put    % ascii 'E',  = 69,
Encoding  70 /char_46 put    % ascii 'F',  = 70,
Encoding  71 /char_47 put    % ascii 'G',  = 71,
Encoding  72 /char_48 put    % ascii 'H',  = 72,
Encoding  73 /char_49 put    % ascii 'I',  = 73,
Encoding  74 /char_4A put    % ascii 'J',  = 74,
Encoding  75 /char_4B put    % ascii 'K',  = 75,
Encoding  76 /char_4C put    % ascii 'L',  = 76,
Encoding  77 /char_4D put    % ascii 'M',  = 77,
Encoding  78 /char_4E put    % ascii 'N',  = 78,
Encoding  79 /char_4F put    % ascii 'O',  = 79,
Encoding  80 /char_50 put    % ascii 'P',  = 80,
Encoding  81 /char_51 put    % ascii 'Q',  = 81,
Encoding  82 /char_52 put    % ascii 'R',  = 82,
Encoding  83 /char_53 put    % ascii 'S',  = 83,
Encoding  84 /char_54 put    % ascii 'T',  = 84,
Encoding  85 /char_55 put    % ascii 'U',  = 85,
Encoding  86 /char_56 put    % ascii 'V',  = 86,
Encoding  87 /char_57 put    % ascii 'W',  = 87,
Encoding  88 /char_58 put    % ascii 'X',  = 88,
Encoding  89 /char_59 put    % ascii 'Y',  = 89,
Encoding  90 /char_5A put    % ascii 'Z',  = 90,
Encoding  91 /char_5B put    % ascii '[',  = 91,
Encoding  92 /char_5C put    % ascii '\',  = 92,
Encoding  93 /char_5D put    % ascii ']',  = 93,
Encoding  94 /char_5E put    % ascii '^',  = 94,
Encoding  95 /char_5F put    % ascii '_',  = 95,
Encoding  96 /char_60 put    % ascii '`',  = 96,
Encoding  97 /char_61 put    % ascii 'a',  = 97,
Encoding  98 /char_62 put    % ascii 'b',  = 98,
Encoding  99 /char_63 put    % ascii 'c',  = 99,
Encoding 100 /char_64 put    % ascii 'd',  = 100,
Encoding 101 /char_65 put    % ascii 'e',  = 101,
Encoding 102 /char_66 put    % ascii 'f',  = 102,
Encoding 103 /char_67 put    % ascii 'g',  = 103,
Encoding 104 /char_68 put    % ascii 'h',  = 104,
Encoding 105 /char_69 put    % ascii 'i',  = 105,
Encoding 106 /char_6A put    % ascii 'j',  = 106,
Encoding 107 /char_6B put    % ascii 'k',  = 107,
Encoding 108 /char_6C put    % ascii 'l',  = 108,
Encoding 109 /char_6D put    % ascii 'm',  = 109,
Encoding 110 /char_6E put    % ascii 'n',  = 110,
Encoding 111 /char_6F put    % ascii 'o',  = 111,
Encoding 112 /char_70 put    % ascii 'p',  = 112,
Encoding 113 /char_71 put    % ascii 'q',  = 113,
Encoding 114 /char_72 put    % ascii 'r',  = 114,
Encoding 115 /char_73 put    % ascii 's',  = 115,
Encoding 116 /char_74 put    % ascii 't',  = 116,
Encoding 117 /char_75 put    % ascii 'u',  = 117,
Encoding 118 /char_76 put    % ascii 'v',  = 118,
Encoding 119 /char_77 put    % ascii 'w',  = 119,
Encoding 120 /char_78 put    % ascii 'x',  = 120,
Encoding 121 /char_79 put    % ascii 'y',  = 121,
Encoding 122 /char_7A put    % ascii 'z',  = 122,
Encoding 123 /char_7B put    % ascii '{',  = 123,
Encoding 124 /char_7C put    % ascii '|',  = 124,
Encoding 125 /char_7D put    % ascii '}',  = 125,
Encoding 126 /char_7E put    % ascii '~',  = 126,
Encoding 127 /char_7F put    % ascii not printable,  = 127,
Encoding 128 /char_80 put    % ascii not printable,  = 128,
Encoding 129 /char_81 put    % ascii not printable,  = 129,
Encoding 130 /char_82 put    % ascii not printable,  = 130,
Encoding 131 /char_83 put    % ascii not printable,  = 131,
Encoding 132 /char_84 put    % ascii not printable,  = 132,
Encoding 133 /char_85 put    % ascii not printable,  = 133,
Encoding 134 /char_86 put    % ascii not printable,  = 134,
Encoding 135 /char_87 put    % ascii not printable,  = 135,
Encoding 136 /char_88 put    % ascii not printable,  = 136,
Encoding 137 /char_89 put    % ascii not printable,  = 137,
Encoding 138 /char_8A put    % ascii not printable,  = 138,
Encoding 139 /char_8B put    % ascii not printable,  = 139,
Encoding 140 /char_8C put    % ascii not printable,  = 140,
Encoding 141 /char_8D put    % ascii not printable,  = 141,
Encoding 142 /char_8E put    % ascii not printable,  = 142,
Encoding 143 /char_8F put    % ascii not printable,  = 143,
Encoding 144 /char_90 put    % ascii not printable,  = 144,
Encoding 145 /char_91 put    % ascii not printable,  = 145,
Encoding 146 /char_92 put    % ascii not printable,  = 146,
Encoding 147 /char_93 put    % ascii not printable,  = 147,
Encoding 148 /char_94 put    % ascii not printable,  = 148,
Encoding 149 /char_95 put    % ascii not printable,  = 149,
Encoding 150 /char_96 put    % ascii not printable,  = 150,
Encoding 151 /char_97 put    % ascii not printable,  = 151,
Encoding 152 /char_98 put    % ascii not printable,  = 152,
Encoding 153 /char_99 put    % ascii not printable,  = 153,
Encoding 154 /char_9A put    % ascii not printable,  = 154,
Encoding 155 /char_9B put    % ascii not printable,  = 155,
Encoding 156 /char_9C put    % ascii not printable,  = 156,
Encoding 157 /char_9D put    % ascii not printable,  = 157,
Encoding 158 /char_9E put    % ascii not printable,  = 158,
Encoding 159 /char_9F put    % ascii not printable,  = 159,
Encoding 160 /char_A0 put    % ascii not printable,  = 160,
Encoding 161 /char_A1 put    % ascii not printable,  = 161,
Encoding 162 /char_A2 put    % ascii not printable,  = 162,
Encoding 163 /char_A3 put    % ascii not printable,  = 163,
Encoding 164 /char_A4 put    % ascii not printable,  = 164,
Encoding 165 /char_A5 put    % ascii not printable,  = 165,
Encoding 166 /char_A6 put    % ascii not printable,  = 166,
Encoding 167 /char_A7 put    % ascii not printable,  = 167,
Encoding 168 /char_A8 put    % ascii not printable,  = 168,
Encoding 169 /char_A9 put    % ascii not printable,  = 169,
Encoding 170 /char_AA put    % ascii not printable,  = 170,
Encoding 171 /char_AB put    % ascii not printable,  = 171,
Encoding 172 /char_AC put    % ascii not printable,  = 172,
Encoding 173 /char_AD put    % ascii not printable,  = 173,
Encoding 174 /char_AE put    % ascii not printable,  = 174,
Encoding 175 /char_AF put    % ascii not printable,  = 175,
Encoding 176 /char_B0 put    % ascii not printable,  = 176,
Encoding 177 /char_B1 put    % ascii not printable,  = 177,
Encoding 178 /char_B2 put    % ascii not printable,  = 178,
Encoding 179 /char_B3 put    % ascii not printable,  = 179,
Encoding 180 /char_B4 put    % ascii not printable,  = 180,
Encoding 181 /char_B5 put    % ascii not printable,  = 181,
Encoding 182 /char_B6 put    % ascii not printable,  = 182,
Encoding 183 /char_B7 put    % ascii not printable,  = 183,
Encoding 184 /char_B8 put    % ascii not printable,  = 184,
Encoding 185 /char_B9 put    % ascii not printable,  = 185,
Encoding 186 /char_BA put    % ascii not printable,  = 186,
Encoding 187 /char_BB put    % ascii not printable,  = 187,
Encoding 188 /char_BC put    % ascii not printable,  = 188,
Encoding 189 /char_BD put    % ascii not printable,  = 189,
Encoding 190 /char_BE put    % ascii not printable,  = 190,
Encoding 191 /char_BF put    % ascii not printable,  = 191,
Encoding 192 /char_C0 put    % ascii not printable,  = 192,
Encoding 193 /char_C1 put    % ascii not printable,  = 193,
Encoding 194 /char_C2 put    % ascii not printable,  = 194,
Encoding 195 /char_C3 put    % ascii not printable,  = 195,
Encoding 196 /char_C4 put    % ascii not printable,  = 196,
Encoding 197 /char_C5 put    % ascii not printable,  = 197,
Encoding 198 /char_C6 put    % ascii not printable,  = 198,
Encoding 199 /char_C7 put    % ascii not printable,  = 199,
Encoding 200 /char_C8 put    % ascii not printable,  = 200,
Encoding 201 /char_C9 put    % ascii not printable,  = 201,
Encoding 202 /char_CA put    % ascii not printable,  = 202,
Encoding 203 /char_CB put    % ascii not printable,  = 203,
Encoding 204 /char_CC put    % ascii not printable,  = 204,
Encoding 205 /char_CD put    % ascii not printable,  = 205,
Encoding 206 /char_CE put    % ascii not printable,  = 206,
Encoding 207 /char_CF put    % ascii not printable,  = 207,
Encoding 208 /char_D0 put    % ascii not printable,  = 208,
Encoding 209 /char_D1 put    % ascii not printable,  = 209,
Encoding 210 /char_D2 put    % ascii not printable,  = 210,
Encoding 211 /char_D3 put    % ascii not printable,  = 211,
Encoding 212 /char_D4 put    % ascii not printable,  = 212,
Encoding 213 /char_D5 put    % ascii not printable,  = 213,
Encoding 214 /char_D6 put    % ascii not printable,  = 214,
Encoding 215 /char_D7 put    % ascii not printable,  = 215,
Encoding 216 /char_D8 put    % ascii not printable,  = 216,
Encoding 217 /char_D9 put    % ascii not printable,  = 217,
Encoding 218 /char_DA put    % ascii not printable,  = 218,
Encoding 219 /char_DB put    % ascii not printable,  = 219,
Encoding 220 /char_DC put    % ascii not printable,  = 220,
Encoding 221 /char_DD put    % ascii not printable,  = 221,
Encoding 222 /char_DE put    % ascii not printable,  = 222,
Encoding 223 /char_DF put    % ascii not printable,  = 223,
Encoding 224 /char_E0 put    % ascii not printable,  = 224,
Encoding 225 /char_E1 put    % ascii not printable,  = 225,
Encoding 226 /char_E2 put    % ascii not printable,  = 226,
Encoding 227 /char_E3 put    % ascii not printable,  = 227,
Encoding 228 /char_E4 put    % ascii not printable,  = 228,
Encoding 229 /char_E5 put    % ascii not printable,  = 229,
Encoding 230 /char_E6 put    % ascii not printable,  = 230,
Encoding 231 /char_E7 put    % ascii not printable,  = 231,
Encoding 232 /char_E8 put    % ascii not printable,  = 232,
Encoding 233 /char_E9 put    % ascii not printable,  = 233,
Encoding 234 /char_EA put    % ascii not printable,  = 234,
Encoding 235 /char_EB put    % ascii not printable,  = 235,
Encoding 236 /char_EC put    % ascii not printable,  = 236,
Encoding 237 /char_ED put    % ascii not printable,  = 237,
Encoding 238 /char_EE put    % ascii not printable,  = 238,
Encoding 239 /char_EF put    % ascii not printable,  = 239,
Encoding 240 /char_F0 put    % ascii not printable,  = 240,
Encoding 241 /char_F1 put    % ascii not printable,  = 241,
Encoding 242 /char_F2 put    % ascii not printable,  = 242,
Encoding 243 /char_F3 put    % ascii not printable,  = 243,
Encoding 244 /char_F4 put    % ascii not printable,  = 244,
Encoding 245 /char_F5 put    % ascii not printable,  = 245,
Encoding 246 /char_F6 put    % ascii not printable,  = 246,
Encoding 247 /char_F7 put    % ascii not printable,  = 247,
Encoding 248 /char_F8 put    % ascii not printable,  = 248,
Encoding 249 /char_F9 put    % ascii not printable,  = 249,
Encoding 250 /char_FA put    % ascii not printable,  = 250,
Encoding 251 /char_FB put    % ascii not printable,  = 251,
Encoding 252 /char_FC put    % ascii not printable,  = 252,
Encoding 253 /char_FD put    % ascii not printable,  = 253,
Encoding 254 /char_FE put    % ascii not printable,  = 254,
Encoding 255 /char_FF put    % ascii not printable,  = 255,

/CharProcs 256 dict def

CharProcs begin
%=================================================
/.notdef {} def         % for notdefined charactes
/char_01
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 3C 42 81 81 A5 A5 81 81 A5 99 81 42 3C 00 00 >} imagemask
}def

/char_02
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 3C 7E FF FF DB DB FF FF DB E7 FF 7E 3C 00 00 >} imagemask
}def

/char_03
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 6C EE FE FE FE 7C 7C 38 38 10 10 00 00 00 >} imagemask
}def

/char_04
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 10 38 38 7C 7C FE 7C 7C 38 38 10 00 00 00 >} imagemask
}def

/char_05
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 38 38 38 10 D6 FE FE D6 10 10 38 00 00 00 >} imagemask
}def

/char_06
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 10 38 38 7C 7C FE FE D6 10 10 38 00 00 00 >} imagemask
}def

/char_07
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 18 3C 3C 3C 3C 18 00 00 00 00 00 00 >} imagemask
}def

/char_08
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<FF FF FF FF E7 C3 C3 C3 C3 E7 FF FF FF FF FF FF >} imagemask
}def

/char_09
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 3C 24 66 42 42 42 66 24 3C 00 00 00 00 >} imagemask
}def

/char_0A
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<FF FF FF C3 DB 99 BD BD BD 99 DB C3 FF FF FF FF >} imagemask
}def

/char_0B
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 1E 06 0A 0A 10 70 88 88 88 88 70 00 00 00 >} imagemask
}def

/char_0C
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 38 44 44 44 44 38 10 10 7C 10 10 00 00 00 >} imagemask
}def

/char_0D
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 10 18 14 14 12 12 10 10 70 F0 E0 00 00 00 >} imagemask
}def

/char_0E
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 20 30 28 24 32 2A 26 22 E2 C2 02 0E 0C 00 00 >} imagemask
}def

/char_0F
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 10 92 BA 44 44 44 C6 44 44 44 BA 92 10 00 00 >} imagemask
}def

/char_10
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 80 E0 F8 FE F8 E0 80 00 00 00 00 00 >} imagemask
}def

/char_11
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 02 0E 3E FE 3E 0E 02 00 00 00 00 00 >} imagemask
}def

/char_12
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 10 38 7C 54 10 10 10 10 10 54 7C 38 10 00 00 >} imagemask
}def

/char_13
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 24 24 24 24 24 24 24 00 00 24 24 00 00 00 >} imagemask
}def

/char_14
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 7F 92 92 92 92 72 12 12 12 12 12 00 00 00 >} imagemask
}def

/char_15
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 38 44 40 20 58 84 82 42 34 08 04 44 38 00 00 >} imagemask
}def

/char_16
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 7E 7E 7E 7E 7E 00 00 00 >} imagemask
}def

/char_17
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 10 38 7C 54 10 10 10 10 54 7C 38 10 00 FF 00 >} imagemask
}def

/char_18
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 10 38 7C 54 10 10 10 10 10 10 10 00 00 00 >} imagemask
}def

/char_19
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 10 10 10 10 10 10 10 54 7C 38 10 00 00 00 >} imagemask
}def

/char_1A
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 18 0C FE 0C 18 00 00 00 00 00 00 >} imagemask
}def

/char_1B
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 30 60 FE 60 30 00 00 00 00 00 00 >} imagemask
}def

/char_1C
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 40 40 40 40 40 7E 00 00 00 00 00 >} imagemask
}def

/char_1D
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 >} imagemask
}def

/char_1E
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 10 10 38 38 7C 7C FE 00 00 00 00 00 >} imagemask
}def

/char_1F
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 FE 7C 7C 38 38 10 10 00 00 00 00 00 >} imagemask
}def

/char_20
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_21
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 10 10 10 10 10 10 10 00 00 10 10 00 00 00 >} imagemask
}def

/char_22
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 24 24 24 24 00 00 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_23
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 44 44 44 FE 44 44 44 FE 44 44 44 00 00 00 >} imagemask
}def

/char_24
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 10 7C 92 90 90 90 7C 12 12 12 92 7C 10 00 00 >} imagemask
}def

/char_25
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 60 90 90 92 64 08 10 20 4C 92 12 12 0C 00 00 >} imagemask
}def

/char_26
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 60 90 90 90 50 20 50 8A 84 8A 70 00 00 00 >} imagemask
}def

/char_27
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 18 18 08 08 00 00 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_28
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 04 08 10 10 20 20 20 20 20 10 10 08 04 00 00 >} imagemask
}def

/char_29
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 40 20 10 10 08 08 08 08 08 10 10 20 40 00 00 >} imagemask
}def

/char_2A
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 10 92 54 38 54 92 10 00 00 00 00 00 >} imagemask
}def

/char_2B
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 10 10 10 FE 10 10 10 00 00 00 00 00 >} imagemask
}def

/char_2C
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 00 00 00 30 30 10 10 00 >} imagemask
}def

/char_2D
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 7E 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_2E
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 00 00 00 30 30 00 00 00 >} imagemask
}def

/char_2F
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 02 02 04 04 08 08 10 10 10 20 20 40 40 00 00 >} imagemask
}def

/char_30
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3C 42 46 46 4A 4A 52 52 62 62 3C 00 00 00 >} imagemask
}def

/char_31
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 08 18 28 08 08 08 08 08 08 08 3E 00 00 00 >} imagemask
}def

/char_32
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3C 42 42 42 02 04 08 10 20 42 7E 00 00 00 >} imagemask
}def

/char_33
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3C 42 42 02 04 18 04 02 42 42 3C 00 00 00 >} imagemask
}def

/char_34
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 0C 14 14 24 24 44 44 FE 04 04 0E 00 00 00 >} imagemask
}def

/char_35
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 7E 40 40 40 7C 42 02 02 02 42 3C 00 00 00 >} imagemask
}def

/char_36
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3C 42 40 40 7C 42 42 42 42 42 3C 00 00 00 >} imagemask
}def

/char_37
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FE 82 84 04 08 08 10 10 10 10 10 00 00 00 >} imagemask
}def

/char_38
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3C 42 42 42 24 18 24 42 42 42 3C 00 00 00 >} imagemask
}def

/char_39
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3C 42 42 42 42 3E 02 02 02 42 3C 00 00 00 >} imagemask
}def

/char_3A
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 30 30 00 00 00 00 30 30 00 00 00 >} imagemask
}def

/char_3B
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 30 30 00 00 00 00 30 30 10 10 00 >} imagemask
}def

/char_3C
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 02 04 08 10 20 40 20 10 08 04 02 00 00 00 >} imagemask
}def

/char_3D
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 7E 00 00 00 7E 00 00 00 00 00 00 >} imagemask
}def

/char_3E
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 40 20 10 08 04 02 04 08 10 20 40 00 00 00 >} imagemask
}def

/char_3F
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3C 42 42 02 04 08 08 00 00 08 08 00 00 00 >} imagemask
}def

/char_40
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 38 44 82 9E A2 A2 A2 A2 A2 9E 80 42 3C 00 00 >} imagemask
}def

/char_41
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 30 10 28 28 28 44 44 7C 82 82 C6 00 00 00 >} imagemask
}def

/char_42
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FC 42 42 42 44 78 44 42 42 42 FC 00 00 00 >} imagemask
}def

/char_43
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3E 42 82 80 80 80 80 82 82 44 38 00 00 00 >} imagemask
}def

/char_44
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 F8 44 42 42 42 42 42 42 42 44 F8 00 00 00 >} imagemask
}def

/char_45
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FE 42 40 40 44 7C 44 40 40 42 FE 00 00 00 >} imagemask
}def

/char_46
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FE 42 40 40 44 7C 44 40 40 40 F0 00 00 00 >} imagemask
}def

/char_47
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3E 42 82 80 80 9E 82 82 82 42 3E 00 00 00 >} imagemask
}def

/char_48
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 E6 42 42 42 42 7E 42 42 42 42 E6 00 00 00 >} imagemask
}def

/char_49
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 7C 10 10 10 10 10 10 10 10 10 7C 00 00 00 >} imagemask
}def

/char_4A
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 1E 04 04 04 04 04 04 84 84 88 70 00 00 00 >} imagemask
}def

/char_4B
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 CE 84 88 90 A0 D0 88 88 84 84 CE 00 00 00 >} imagemask
}def

/char_4C
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 E0 40 40 40 40 40 40 40 42 42 FE 00 00 00 >} imagemask
}def

/char_4D
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C6 C6 AA AA 92 92 82 82 82 82 C6 00 00 00 >} imagemask
}def

/char_4E
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C6 42 62 52 52 4A 4A 4A 46 42 E2 00 00 00 >} imagemask
}def

/char_4F
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 38 44 82 82 82 82 82 82 82 44 38 00 00 00 >} imagemask
}def

/char_50
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FC 42 42 42 42 42 7C 40 40 40 E0 00 00 00 >} imagemask
}def

/char_51
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 38 44 82 82 82 82 82 82 92 4C 38 04 00 00 >} imagemask
}def

/char_52
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FC 42 42 42 44 78 44 42 42 42 E6 00 00 00 >} imagemask
}def

/char_53
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3E 42 40 40 40 3C 02 02 02 42 7C 00 00 00 >} imagemask
}def

/char_54
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FE 92 92 10 10 10 10 10 10 10 38 00 00 00 >} imagemask
}def

/char_55
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 E6 42 42 42 42 42 42 42 42 42 3C 00 00 00 >} imagemask
}def

/char_56
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C6 82 82 44 44 44 28 28 28 10 10 00 00 00 >} imagemask
}def

/char_57
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C6 82 82 92 92 92 54 54 54 6C 44 00 00 00 >} imagemask
}def

/char_58
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C6 82 44 44 28 10 28 44 44 82 C6 00 00 00 >} imagemask
}def

/char_59
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C6 82 44 44 28 28 10 10 10 10 38 00 00 00 >} imagemask
}def

/char_5A
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 7E 42 04 04 08 10 10 20 20 42 7E 00 00 00 >} imagemask
}def

/char_5B
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 3C 20 20 20 20 20 20 20 20 20 20 20 3C 00 00 >} imagemask
}def

/char_5C
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 40 40 20 20 10 10 08 08 08 04 04 02 02 00 00 >} imagemask
}def

/char_5D
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 78 08 08 08 08 08 08 08 08 08 08 08 78 00 00 >} imagemask
}def

/char_5E
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 10 28 44 82 00 00 00 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_5F
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 >} imagemask
}def

/char_60
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 20 20 10 10 00 00 00 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_61
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 78 84 04 7C 84 84 8C 76 00 00 00 >} imagemask
}def

/char_62
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C0 40 40 5C 62 42 42 42 42 62 DC 00 00 00 >} imagemask
}def

/char_63
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 3E 42 40 40 40 42 42 3C 00 00 00 >} imagemask
}def

/char_64
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 0C 04 04 74 8C 84 84 84 84 8C 76 00 00 00 >} imagemask
}def

/char_65
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 3C 42 42 7E 40 40 42 3C 00 00 00 >} imagemask
}def

/char_66
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 0C 10 10 10 7C 10 10 10 10 10 10 7C 00 00 00 >} imagemask
}def

/char_67
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 76 8C 84 84 84 8C 74 04 84 78 00 >} imagemask
}def

/char_68
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C0 40 40 5C 62 42 42 42 42 42 E2 00 00 00 >} imagemask
}def

/char_69
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 18 18 00 00 38 08 08 08 08 08 08 7E 00 00 00 >} imagemask
}def

/char_6A
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 0C 0C 00 00 1C 04 04 04 04 04 04 44 44 38 00 >} imagemask
}def

/char_6B
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C0 40 40 4E 44 48 50 68 44 42 C6 00 00 00 >} imagemask
}def

/char_6C
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 38 08 08 08 08 08 08 08 08 08 7E 00 00 00 >} imagemask
}def

/char_6D
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 AC D2 92 92 92 92 92 D6 00 00 00 >} imagemask
}def

/char_6E
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 DC 62 42 42 42 42 42 E6 00 00 00 >} imagemask
}def

/char_6F
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 38 44 82 82 82 82 44 38 00 00 00 >} imagemask
}def

/char_70
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 DC 62 42 42 42 42 62 5C 40 E0 00 >} imagemask
}def

/char_71
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 74 8C 84 84 84 84 8C 74 04 06 00 >} imagemask
}def

/char_72
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 6E 32 20 20 20 20 20 70 00 00 00 >} imagemask
}def

/char_73
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 3E 42 40 30 0C 02 42 7C 00 00 00 >} imagemask
}def

/char_74
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 20 20 20 FC 20 20 20 20 20 20 1C 00 00 00 >} imagemask
}def

/char_75
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 E6 42 42 42 42 42 42 3C 00 00 00 >} imagemask
}def

/char_76
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 C6 82 82 44 44 28 28 10 00 00 00 >} imagemask
}def

/char_77
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 C6 82 92 92 92 54 6C 44 00 00 00 >} imagemask
}def

/char_78
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 EE 44 28 10 10 28 44 EE 00 00 00 >} imagemask
}def

/char_79
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 C6 82 44 44 28 28 10 10 20 70 00 >} imagemask
}def

/char_7A
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 7E 42 04 08 10 20 42 7E 00 00 00 >} imagemask
}def

/char_7B
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 0C 10 10 10 10 10 60 10 10 10 10 10 0C 00 00 >} imagemask
}def

/char_7C
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 10 10 10 10 10 00 10 10 10 10 10 00 00 00 >} imagemask
}def

/char_7D
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 60 10 10 10 10 10 0C 10 10 10 10 10 60 00 00 >} imagemask
}def

/char_7E
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 60 92 92 0C 00 00 00 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_7F
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 10 10 28 28 44 44 82 82 FE 00 00 00 >} imagemask
}def

/char_80
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 1E 22 42 42 42 42 7E 42 42 42 C2 00 00 00 >} imagemask
}def

/char_81
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FE 42 40 40 7C 42 42 42 42 42 FC 00 00 00 >} imagemask
}def

/char_82
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FC 42 42 42 42 7C 42 42 42 42 FC 00 00 00 >} imagemask
}def

/char_83
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FE 42 40 40 40 40 40 40 40 40 F0 00 00 00 >} imagemask
}def

/char_84
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3E 14 14 14 24 24 24 44 44 44 FE 82 82 00 >} imagemask
}def

/char_85
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FE 42 40 40 44 7C 44 40 40 42 FE 00 00 00 >} imagemask
}def

/char_86
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 D6 92 54 54 38 10 38 54 54 92 D6 00 00 00 >} imagemask
}def

/char_87
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 7C 82 82 02 04 38 04 02 82 82 7C 00 00 00 >} imagemask
}def

/char_88
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 E6 42 42 46 4A 52 62 42 42 42 E6 00 00 00 >} imagemask
}def

/char_89
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<38 00 E6 42 42 46 4A 52 62 42 42 42 E6 00 00 00 >} imagemask
}def

/char_8A
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 CE 84 88 90 A0 D0 88 88 84 84 CE 00 00 00 >} imagemask
}def

/char_8B
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3E 14 14 14 24 24 24 44 44 44 CE 00 00 00 >} imagemask
}def

/char_8C
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C6 C6 AA AA 92 92 82 82 82 82 C6 00 00 00 >} imagemask
}def

/char_8D
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 E6 42 42 42 42 7E 42 42 42 42 E6 00 00 00 >} imagemask
}def

/char_8E
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3C 42 42 42 42 42 42 42 42 42 3C 00 00 00 >} imagemask
}def

/char_8F
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FE 42 42 42 42 42 42 42 42 42 E6 00 00 00 >} imagemask
}def

/char_90
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FC 42 42 42 42 42 42 7C 40 40 E0 00 00 00 >} imagemask
}def

/char_91
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 3C 42 42 40 40 40 40 42 42 42 3C 00 00 00 >} imagemask
}def

/char_92
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 FE 92 92 10 10 10 10 10 10 10 38 00 00 00 >} imagemask
}def

/char_93
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C6 82 44 44 28 28 10 10 10 20 C0 00 00 00 >} imagemask
}def

/char_94
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 10 7C 92 92 92 92 92 92 92 92 92 7C 10 38 00 >} imagemask
}def

/char_95
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 C6 82 44 44 28 10 28 44 44 82 C6 00 00 00 >} imagemask
}def

/char_96
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 EE 44 44 44 44 44 44 44 44 44 FE 02 02 00 >} imagemask
}def

/char_97
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 EE 44 44 44 44 44 3C 04 04 04 0E 00 00 00 >} imagemask
}def

/char_98
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 EE 44 44 44 54 54 54 54 54 54 FE 00 00 00 >} imagemask
}def

/char_99
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 EE 44 44 44 54 54 54 54 54 54 FE 02 02 00 >} imagemask
}def

/char_9A
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 F0 A0 A0 A0 20 3C 22 22 22 22 FC 00 00 00 >} imagemask
}def

/char_9B
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 E6 42 42 42 42 72 4A 4A 4A 4A F6 00 00 00 >} imagemask
}def

/char_9C
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 E0 40 40 40 40 7C 42 42 42 42 FC 00 00 00 >} imagemask
}def

/char_9D
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 38 44 02 02 22 3E 22 02 02 44 38 00 00 00 >} imagemask
}def

/char_9E
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 CC 92 92 92 92 F2 92 92 92 92 CC 00 00 00 >} imagemask
}def

/char_9F
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 7E 84 84 84 84 7C 14 24 24 44 CE 00 00 00 >} imagemask
}def

/char_A0
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 78 84 04 7C 84 84 84 7E 00 00 00 >} imagemask
}def

/char_A1
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 02 3C 40 5C 62 42 42 42 42 42 3C 00 00 00 >} imagemask
}def

/char_A2
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 FC 42 42 7C 42 42 42 FC 00 00 00 >} imagemask
}def

/char_A3
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 FE 42 40 40 40 40 40 E0 00 00 00 >} imagemask
}def

/char_A4
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 3E 14 14 24 24 44 44 FE 82 82 00 >} imagemask
}def

/char_A5
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 3C 42 42 7E 40 40 42 3C 00 00 00 >} imagemask
}def

/char_A6
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 D6 54 38 10 10 38 54 D6 00 00 00 >} imagemask
}def

/char_A7
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 3C 42 02 1C 02 02 42 3C 00 00 00 >} imagemask
}def

/char_A8
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 EE 44 44 4C 54 64 44 EE 00 00 00 >} imagemask
}def

/char_A9
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 38 00 EE 44 44 4C 54 64 44 EE 00 00 00 >} imagemask
}def

/char_AA
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 C6 44 48 50 68 48 44 C6 00 00 00 >} imagemask
}def

/char_AB
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 3E 14 14 24 24 44 44 CE 00 00 00 >} imagemask
}def

/char_AC
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 C6 C6 AA AA 92 92 82 C6 00 00 00 >} imagemask
}def

/char_AD
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 EE 44 44 44 7C 44 44 EE 00 00 00 >} imagemask
}def

/char_AE
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 3C 42 42 42 42 42 42 3C 00 00 00 >} imagemask
}def

/char_AF
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 FE 44 44 44 44 44 44 EE 00 00 00 >} imagemask
}def

/char_B0
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<22 22 88 88 22 22 88 88 22 22 88 88 22 22 88 88 >} imagemask
}def

/char_B1
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<55 55 AA AA 55 55 AA AA 55 55 AA AA 55 55 AA AA >} imagemask
}def

/char_B2
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<DB DB 77 77 DB DB EE EE DB DB 77 77 DB DB EE EE >} imagemask
}def

/char_B3
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 >} imagemask
}def

/char_B4
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 10 10 10 F0 10 10 10 10 10 10 10 >} imagemask
}def

/char_B5
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 F0 10 10 F0 10 10 10 10 10 10 10 >} imagemask
}def

/char_B6
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 14 14 14 F4 14 14 14 14 14 14 14 >} imagemask
}def

/char_B7
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 FC 14 14 14 14 14 14 14 >} imagemask
}def

/char_B8
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 F0 10 10 F0 10 10 10 10 10 10 10 >} imagemask
}def

/char_B9
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 F4 04 04 F4 14 14 14 14 14 14 14 >} imagemask
}def

/char_BA
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 >} imagemask
}def

/char_BB
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 FC 04 04 F4 14 14 14 14 14 14 14 >} imagemask
}def

/char_BC
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 F4 04 04 FC 00 00 00 00 00 00 00 >} imagemask
}def

/char_BD
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 14 14 14 FC 00 00 00 00 00 00 00 >} imagemask
}def

/char_BE
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 F0 10 10 F0 00 00 00 00 00 00 00 >} imagemask
}def

/char_BF
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 F0 10 10 10 10 10 10 10 >} imagemask
}def

/char_C0
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 10 10 10 1F 00 00 00 00 00 00 00 >} imagemask
}def

/char_C1
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 10 10 10 FF 00 00 00 00 00 00 00 >} imagemask
}def

/char_C2
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 FF 10 10 10 10 10 10 10 >} imagemask
}def

/char_C3
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 10 10 10 1F 10 10 10 10 10 10 10 >} imagemask
}def

/char_C4
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00 >} imagemask
}def

/char_C5
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 10 10 10 FF 10 10 10 10 10 10 10 >} imagemask
}def

/char_C6
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 1F 10 10 1F 10 10 10 10 10 10 10 >} imagemask
}def

/char_C7
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 14 14 14 17 14 14 14 14 14 14 14 >} imagemask
}def

/char_C8
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 17 10 10 1F 00 00 00 00 00 00 00 >} imagemask
}def

/char_C9
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 1F 10 10 17 14 14 14 14 14 14 14 >} imagemask
}def

/char_CA
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 F7 00 00 FF 00 00 00 00 00 00 00 >} imagemask
}def

/char_CB
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 FF 00 00 F7 14 14 14 14 14 14 14 >} imagemask
}def

/char_CC
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 17 10 10 17 14 14 14 14 14 14 14 >} imagemask
}def

/char_CD
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 FF 00 00 FF 00 00 00 00 00 00 00 >} imagemask
}def

/char_CE
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 F7 00 00 F7 14 14 14 14 14 14 14 >} imagemask
}def

/char_CF
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 FF 00 00 FF 00 00 00 00 00 00 00 >} imagemask
}def

/char_D0
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 14 14 14 FF 00 00 00 00 00 00 00 >} imagemask
}def

/char_D1
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 FF 00 00 FF 10 10 10 10 10 10 10 >} imagemask
}def

/char_D2
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 FF 14 14 14 14 14 14 14 >} imagemask
}def

/char_D3
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 14 14 14 1F 00 00 00 00 00 00 00 >} imagemask
}def

/char_D4
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 1F 10 10 1F 00 00 00 00 00 00 00 >} imagemask
}def

/char_D5
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 1F 10 10 1F 10 10 10 10 10 10 10 >} imagemask
}def

/char_D6
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 1F 14 14 14 14 14 14 14 >} imagemask
}def

/char_D7
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<14 14 14 14 14 14 14 14 FF 14 14 14 14 14 14 14 >} imagemask
}def

/char_D8
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 FF 10 10 FF 10 10 10 10 10 10 10 >} imagemask
}def

/char_D9
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 10 10 10 F0 00 00 00 00 00 00 00 >} imagemask
}def

/char_DA
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 1F 10 10 10 10 10 10 10 >} imagemask
}def

/char_DB
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF >} imagemask
}def

/char_DC
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF >} imagemask
}def

/char_DD
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 >} imagemask
}def

/char_DE
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F >} imagemask
}def

/char_DF
{ 562 1000 scale
8 16 true [8 0 0 -16 0 16]
{<FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_E0
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 DC 62 42 42 42 42 42 7C 40 E0 00 >} imagemask
}def

/char_E1
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 3C 42 40 40 40 42 42 3C 00 00 00 >} imagemask
}def

/char_E2
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 FE 92 10 10 10 10 10 38 00 00 00 >} imagemask
}def

/char_E3
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 C6 82 44 44 28 28 10 10 20 C0 00 >} imagemask
}def

/char_E4
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 38 10 7C 92 92 92 92 92 92 7C 10 38 00 >} imagemask
}def

/char_E5
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 EE 44 28 10 10 28 44 EE 00 00 00 >} imagemask
}def

/char_E6
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 EE 44 44 44 44 44 44 FE 02 02 00 >} imagemask
}def

/char_E7
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 EE 44 44 44 3C 04 04 0E 00 00 00 >} imagemask
}def

/char_E8
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 EE 44 44 54 54 54 54 FE 00 00 00 >} imagemask
}def

/char_E9
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 EE 44 44 54 54 54 54 FE 02 02 00 >} imagemask
}def

/char_EA
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 F0 A0 A0 3C 22 22 22 7C 00 00 00 >} imagemask
}def

/char_EB
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 E6 42 42 72 4A 4A 4A F6 00 00 00 >} imagemask
}def

/char_EC
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 E0 40 40 7C 42 42 42 FC 00 00 00 >} imagemask
}def

/char_ED
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 38 44 02 1E 02 02 44 38 00 00 00 >} imagemask
}def

/char_EE
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 CC 92 92 92 F2 92 92 CC 00 00 00 >} imagemask
}def

/char_EF
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 7E 84 84 84 7C 24 44 EE 00 00 00 >} imagemask
}def

/char_F0
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 F0 1C 06 03 3B 73 FB DF 0E FF C3 C1 00 00 00 >} imagemask
}def

/char_F1
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 10 10 10 FE 10 10 10 00 FE 00 00 00 00 >} imagemask
}def

/char_F2
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 C0 30 0C 02 0C 30 C0 00 FE 00 00 00 00 >} imagemask
}def

/char_F3
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 06 18 60 80 60 18 06 00 FE 00 00 00 00 >} imagemask
}def

/char_F4
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 0C 12 10 10 10 10 10 10 10 10 10 10 10 10 10 >} imagemask
}def

/char_F5
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<10 10 10 10 10 10 10 10 10 10 10 10 10 90 60 00 >} imagemask
}def

/char_F6
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 30 00 00 FE 00 00 30 00 00 00 00 00 >} imagemask
}def

/char_F7
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 62 92 8C 00 62 92 8C 00 00 00 00 00 >} imagemask
}def

/char_F8
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 18 24 24 18 00 00 00 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_F9
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 38 38 38 38 00 00 00 00 00 00 00 >} imagemask
}def

/char_FA
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 38 38 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_FB
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 0F 08 08 08 08 88 88 48 48 28 28 18 00 00 00 >} imagemask
}def

/char_FC
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 58 68 48 48 48 00 00 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_FD
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 30 48 10 20 78 00 00 00 00 00 00 00 00 00 00 >} imagemask
}def

/char_FE
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 08 18 18 FF 66 24 7E 66 81 00 00 00 00 00 00 >} imagemask
}def

/char_FF
{ 500 1000 scale
8 16 true [8 0 0 -16 0 16]
{<00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 >} imagemask
}def

%=====================================================
end   % of CharProcs

/BuildChar
{
	562 0
	0 0 1000 1000
	setcachedevice
	exch begin
	  Encoding exch get
	  CharProcs exch get

	end
	exec
}def

end   % of newfont
/PCnormal newfont definefont pop
/PCnormal findfont 10 scalefont setfont

%%EndProlog
%%Page: 1 1
60 762 moveto
(\052 Team informations:) show
60 752 moveto
(\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052) show
60 732 moveto
(Team Name     : Cow_n_Action) show
60 722 moveto
(Country       : Belgium) show
60 712 moveto
(Instituton    : ULB) show
60 702 moveto
(Team\047s leader : Nicolas Glady) show
60 692 moveto
(email         : nglady@ulb\056ac\056be) show
60 672 moveto
(\052 General overview:) show
60 662 moveto
(\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052) show
60 642 moveto
(\055 based on the CMUnited98 code for low\055level functions) show
60 632 moveto
(\055 project made for a thesis and should be overtaken and improved year by year) show
60 622 moveto
(\055 use of a simplified production rule system for clarity:) show
60 612 moveto
(  \055 preconditions are checked in order to apply a rule) show
60 602 moveto
(  \055 macroactions which contain the code to be executed if its preconditions are matched) show
60 582 moveto
(  \055 costs to retain the best action if the preconditions of more than one action are matched) show
60 562 moveto
(\055 neural networks used for complex and non\055linear functions/behaviour \050not yet finished\051) show
60 542 moveto
(\055 raytracing\055like method used to determine the best angle to shoot/pass) show
60 522 moveto
(\052 Production rule system:) show
60 512 moveto
(\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052) show
60 492 moveto
(As this work should be overtaken by students of our university year by year\054 we thought it) show
60 472 moveto
(should be easier for our successors to cut the code into small functions which are more) show
60 452 moveto
(understandable than large and complex routines\056 Each of those small functions \050called) show
60 432 moveto
(macroactions\051 possess:) show
60 422 moveto
(\055 preconditions \050a list of flags describing the game\047s state\051 in order to run its corresponding) show
60 402 moveto
(  action) show
60 392 moveto
(\055 a list of flags to specify in which game\047s state the action should be interrupted) show
60 372 moveto
(\055 a list of modified flags by the action \050as the game\047s state and the flags describing it) show
60 352 moveto
(  change through the actions we made\051 which are used for planification of further actions to) show
60 332 moveto
(  make in the future) show
60 322 moveto
(\055 as more than one action may be taken at the same time\054 a cost function is needed to) show
60 302 moveto
(  determine the fitness of those actions and keep the best one) show
60 292 moveto
(\055 the code of the choosen action) show
60 272 moveto
(syntax:) show
60 252 moveto
(MACRO_ACTION\050<action_name>\054 <on_screen_action_name_for_debugging>\051) show
60 242 moveto
(PRE_CONDITION\050<flag_name>\054 <flag_value>\051) show
60 232 moveto
(STOP_CONDITION\050<flag_name>\054 <flag_value>\051) show
60 222 moveto
(MODIFY_FLAG\050<flag_name>\054 <flag_new_value>\051) show
60 212 moveto
(COST) show
60 202 moveto
({) show
60 192 moveto
(  // calculate the cost of the action here) show
60 182 moveto
(}) show
60 172 moveto
(MACRO_BODY_START) show
60 162 moveto
({) show
60 152 moveto
(  // execute the code of the action here) show
60 142 moveto
(}) show
60 132 moveto
(MACRO_BODY_END) show
60 112 moveto
(simple example:) show
60 92 moveto
(MACRO_ACTION\050run_for_ball\054 \042RUN FOR BALL\042\051) show
60 82 moveto
(PRE_CONDITION\050FASTEST_ON_BALL\054 true\051) show
60 72 moveto
(PRE_CONDITION\050PLAY_MODE_ON\054 true\051) show
60 62 moveto
(STOP_CONDITON\050BALL_KICKABLE\054 true\051) show
60 52 moveto
(COST) show
60 42 moveto
({) show
60 32 moveto
(  return PredictedCyclesToPoint\050InterceptBallPosition\050SP_max_power\051\054 SP_max_power\051;) show
showpage
%%EndPage: 1 1
%%Page: 2 2
60 762 moveto
(}) show
60 752 moveto
(MACRO_BODY_START) show
60 742 moveto
({) show
60 732 moveto
(  RunToPoint\050InterceptBallPosition\050SP_max_power\051\054 SP_max_power\051;) show
60 722 moveto
(}) show
60 702 moveto
(As the actions differ from players to players \050for example\054 strikers won\047t have the same) show
60 682 moveto
(behaviour as defenders\051\054 each type of player \050producer\051 has a list of macroactions he can) show
60 662 moveto
(perform\056 Orders sent by that type of player can also be defined here\056) show
60 642 moveto
(syntax:) show
60 622 moveto
(PRODUCER\050<producer_name>\051) show
60 612 moveto
(RULE\050<action_name>\051) show
60 602 moveto
(ORDERS) show
60 592 moveto
({) show
60 582 moveto
(  // orders to be sent) show
60 572 moveto
(}) show
60 562 moveto
(END_OF_PRODUCER) show
60 542 moveto
(simple example:) show
60 522 moveto
(PRODUCER\050Goalie\051) show
60 512 moveto
(RULE\050scan_field\051) show
60 502 moveto
(RULE\050go_catch_ball\051) show
60 492 moveto
(RULE\050replace\051) show
60 482 moveto
(RULE\050shoot_ball_away\051) show
60 472 moveto
(RULE\050catch_ball\051) show
60 462 moveto
(ORDERS) show
60 452 moveto
({) show
60 442 moveto
(  // if we are in a defense phasis\054 ask a teammate to hold closest opponent) show
60 432 moveto
(  Unum opponent = ClosestOpponentToPoint\050MyPos\050\051\051;) show
60 422 moveto
(  Unum teammate = ClosestTeammateToPoint\050OpponentAbsolutePosition\050opponent\051\051;) show
60 412 moveto
(  AskTeammate\050teammate\054 opponent\054 HOLD\051;) show
60 402 moveto
(}) show
60 392 moveto
(END_OF_PRODUCER) show
60 372 moveto
(This is clearly the crucial point of our team even if it doesn\047t really have to do with AI but) show
60 352 moveto
(this was needed for transmitting a clear code to our successors year by year\056\056\056 We hope they) show
60 332 moveto
(should be able to focus over other aspects of the simulation during the next years\056) show
60 312 moveto
(  ) show
60 302 moveto
(\052 Raytracing:) show
60 292 moveto
(\052\052\052\052\052\052\052\052\052\052\052\052\052) show
60 272 moveto
(This method is used to see which angle is the safest for shooting\054 passing or which one is) show
60 252 moveto
(the most unsafe for positionning the goalie where opponents have the biggest angle to score\056) show
60 232 moveto
(In facts\054 we look for the largest beam of good angles and take the middle angle of this beam\056) show
60 202 moveto
(algorithm overview for shooting in opponent goal:) show
60 182 moveto
(AngleDeg ray_angles[RAY_DISCRETISATION];) show
60 172 moveto
(bool     ray_bool[RAY_DISCRETISATION];) show
60 152 moveto
(// init the ray_angles to range from angle\050MyPos2LeftGoalMarker\051 to angle\050MyPos2RightGoalMarker\051) show
60 122 moveto
(for \050int i = 0; i < RAY_DISCRETISATION; i\053\053\051 {) show
60 102 moveto
(  Ray ray\050MyPos\050\051\054 angles[i]\051;) show
60 92 moveto
(  ray_bool[i] = true;) show
60 72 moveto
(  for \050int j = 1; j <= SP_team_size \046\046 ray_bool[i]; j\053\053\051 {) show
60 62 moveto
(    if \050OpponentPositionValid\050j\051\051 {) show
60 52 moveto
(      ray_bool[i] = \041ray\056IsInRightDir\050OpponentAbsolutePosition\050j\051\051;) show
60 42 moveto
(    }) show
60 32 moveto
(  }) show
60 22 moveto
(}) show
showpage
%%EndPage: 2 2
%%Page: 3 3
60 752 moveto
(// now\054 look for the largest beam of true values in ray_bool and take the middle angle matching) show
60 722 moveto
(\052 Neural Network:) show
60 712 moveto
(\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052) show
60 692 moveto
(As some functions are complex to evaluate in the simulation\054 we have thought of using neural networks) show
60 672 moveto
(like perceptron for approximation\056 But as we write this doc\054 some convergence\047s problems still) show
60 652 moveto
(remain =\050 We hope to be ready for the tournament in June \050if qualified of course\051 and have planned) show
60 632 moveto
(to use genetic algorithm to find closest optimal solution\056 The structure we are currently using) show
60 612 moveto
(is a 3 layers perceptron \0501 input layer \055 1 hidden layer \055 1 output layer\051 with backpropagation) show
60 592 moveto
(for computing new weights of connections but this may change if we find a better structure \050multi\055) show
60 572 moveto
(hidden layers\051\056 Those networks will be used for interceptions\054 kicks\054 dribbles\056\056\056) show
60 542 moveto
(\052 Conclusion:) show
60 532 moveto
(\052\052\052\052\052\052\052\052\052\052\052\052\052) show
60 512 moveto
(The techniques described here are very classical methods used by other teams\056 As we do have other) show
60 492 moveto
(obligations in life\054 we couldn\047t work full\055time on this project\056 Yet\054 we are not very numerous to) show
60 472 moveto
(work on the Robocup as our University \050well\054 most of our professors\051 is very unlikely willing to) show
60 452 moveto
(employ full\055time researchers to work on it\056 Maybe\054 we\047re going to establish contacts with other) show
60 432 moveto
(Universities willing to join a multi\055universities virtual soccer team\056\056\056 Without a critical mass) show
60 412 moveto
(of 4\0555 persons working on it\054 we won\047t be very competitive in the next years\056) show
60 392 moveto
(Some points are still to be improved:) show
60 372 moveto
(\055 new attacks should be made \050for now\054 only simple attack phases have been made like quick counter\055) show
60 352 moveto
(  strike\051 but defense is rather good) show
60 342 moveto
(\055 neural networks should be finished to improve precision of kicks\054 interceptions\056\056\056 we are currently) show
60 322 moveto
(  using analytical functions until convergence\047s problem are fixed\056) show
showpage
%%EndPage: 3 3
%%Trailer
%%DocumentFonts: PCnormal
%%Pages: 3
